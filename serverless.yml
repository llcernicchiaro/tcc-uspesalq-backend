# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: llcernicchiaro
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: tcc
# "service" is the name of this project. This will also be added to your AWS resource names.
service: tcc-uspesalq

provider:
  name: aws
  runtime: nodejs22.x
  region: sa-east-1
  profile: default
  environment:
    NODE_ENV: ${opt:stage, 'development'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:BatchGetItem
          Resource:
            - arn:aws:dynamodb:sa-east-1:299689717750:table/PerformancesTable
            - arn:aws:dynamodb:sa-east-1:299689717750:table/GroupsTable
            - arn:aws:dynamodb:sa-east-1:299689717750:table/EventsTable
            - arn:aws:dynamodb:sa-east-1:299689717750:table/UsersTable
            - arn:aws:dynamodb:sa-east-1:299689717750:table/GroupMembershipTable

functions:
  listUsers:
    handler: src/handlers/user.listUsers
    events:
      - http:
          path: users
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

  createGroup:
    handler: src/handlers/group.createGroup
    events:
      - http:
          path: group
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

  getGroups:
    handler: src/handlers/group.getGroups
    events:
      - http:
          path: groups
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

  updateGroup:
    handler: src/handlers/group.updateGroup
    events:
      - http:
          path: group/{id}
          method: put
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

  deleteGroup:
    handler: src/handlers/group.deleteGroup
    events:
      - http:
          path: group/{id}
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

  getGroup:
    handler: src/handlers/group.getGroup
    events:
      - http:
          path: group/{id}
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

  getGroupsByUser:
    handler: src/handlers/group.getGroupsByUser
    events:
      - http:
          path: groups/mine
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UsersTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    GroupsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: GroupsTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    GroupMembershipTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: GroupMembershipTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: groupId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: groupId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GroupIdIndex
            KeySchema:
              - AttributeName: groupId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    EventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: EventsTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    PerformancesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: PerformancesTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoAuth-${sls:stage}
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - arn:aws:cognito-idp:sa-east-1:299689717750:userpool/sa-east-1_HZRlUjG0F

plugins:
  - serverless-offline
