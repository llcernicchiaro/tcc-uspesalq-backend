# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: llcernicchiaro
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: tcc
# "service" is the name of this project. This will also be added to your AWS resource names.
service: tcc-uspesalq

provider:
  name: aws
  runtime: nodejs22.x
  region: sa-east-1
  profile: default
  environment:
    NODE_ENV: ${opt:stage, 'development'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:BatchGetItem
          Resource:
            - arn:aws:dynamodb:sa-east-1:299689717750:table/GroupsTable
            - arn:aws:dynamodb:sa-east-1:299689717750:table/GroupsTable/index/IsActiveIndex
            - arn:aws:dynamodb:sa-east-1:299689717750:table/EventsTable
            - arn:aws:dynamodb:sa-east-1:299689717750:table/EventsTable/index/GroupIdIndex
            - arn:aws:dynamodb:sa-east-1:299689717750:table/UsersTable
            - arn:aws:dynamodb:sa-east-1:299689717750:table/GroupMembershipTable
            - arn:aws:dynamodb:sa-east-1:299689717750:table/GroupMembershipTable/index/GroupIdIndex
            - arn:aws:dynamodb:sa-east-1:299689717750:table/GroupMembershipTable/index/UserIdIndex
            - arn:aws:dynamodb:sa-east-1:299689717750:table/EventRegistrationsTable
            - arn:aws:dynamodb:sa-east-1:299689717750:table/EventRegistrationsTable/index/eventIdIndex
            - arn:aws:dynamodb:sa-east-1:299689717750:table/EventRegistrationsTable/index/userIdIndex
            - arn:aws:s3:::group-image-bucket-lorenzotcc
            - arn:aws:s3:::group-image-bucket-lorenzotcc/*
            - arn:aws:s3:::event-image-bucket-lorenzotcc
            - arn:aws:s3:::event-image-bucket-lorenzotcc/*

functions:
  getPresignedUploadUrl:
    handler: src/handlers/getPresignedURL.handler
    events:
      - http:
          path: upload-url/{resource}
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

  getUserGroups:
    handler: src/handlers/user/groups/getUserGroups.handler
    events:
      - http:
          path: users/me/groups
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

  getUserEvents:
    handler: src/handlers/user/events/getUserEvents.handler
    events:
      - http:
          path: users/me/events
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

  createGroup:
    handler: src/handlers/groups/createGroup.handler
    events:
      - http:
          path: groups
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

  getGroups:
    handler: src/handlers/groups/getGroups.handler
    events:
      - http:
          path: groups
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

  getGroup:
    handler: src/handlers/groups/getGroup.handler
    events:
      - http:
          path: groups/{groupId}
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

  updateGroup:
    handler: src/handlers/groups/updateGroup.handler
    events:
      - http:
          path: groups/{groupId}
          method: patch
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

  deleteGroup:
    handler: src/handlers/groups/deleteGroup.handler
    events:
      - http:
          path: groups/{groupId}
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

  createMembership:
    handler: src/handlers/groups/memberships/createMembership.handler
    events:
      - http:
          path: groups/{groupId}/memberships
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

  removeMembership:
    handler: src/handlers/groups/memberships/removeMembership.handler
    events:
      - http:
          path: groups/{groupId}/memberships
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

  getMemberships:
    handler: src/handlers/groups/memberships/getMemberships.handler
    events:
      - http:
          path: groups/{groupId}/memberships
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

  updateMembership:
    handler: src/handlers/groups/memberships/updateMembership.handler
    events:
      - http:
          path: groups/{groupId}/memberships/{userId}
          method: patch
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

  createEvent:
    handler: src/handlers/groups/events/createEvent.handler
    events:
      - http:
          path: groups/{groupId}/events
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getEvents:
    handler: src/handlers/groups/events/getEvents.handler
    events:
      - http:
          path: groups/{groupId}/events
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getEvent:
    handler: src/handlers/groups/events/getEvent.handler
    events:
      - http:
          path: groups/{groupId}/events/{eventId}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateEvent:
    handler: src/handlers/groups/events/updateEvent.handler
    events:
      - http:
          path: groups/{groupId}/events/{eventId}
          method: patch
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  deleteEvent:
    handler: src/handlers/groups/events/deleteEvent.handler
    events:
      - http:
          path: groups/{groupId}/events/{eventId}
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createRegistration:
    handler: src/handlers/groups/events/registrations/createRegistration.handler
    events:
      - http:
          path: groups/{groupId}/events/{eventId}/registrations
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  
  removeRegistration:
    handler: src/handlers/groups/events/registrations/removeRegistration.handler
    events:
      - http:
          path: groups/{groupId}/events/{eventId}/registrations
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UsersTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    GroupsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: GroupsTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: isActive
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: IsActiveIndex
            KeySchema:
              - AttributeName: isActive
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    GroupMembershipTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: GroupMembershipTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: groupId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: groupId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GroupIdIndex
            KeySchema:
              - AttributeName: groupId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    EventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: EventsTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: groupId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: GroupIdIndex
            KeySchema:
              - AttributeName: groupId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    EventRegistrationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: EventRegistrationsTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: eventId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EventIdIndex
            KeySchema:
              - AttributeName: eventId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    GroupImageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: group-image-bucket-lorenzotcc

    EventImageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: event-image-bucket-lorenzotcc

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoAuth-${sls:stage}
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - arn:aws:cognito-idp:sa-east-1:299689717750:userpool/sa-east-1_HZRlUjG0F

plugins:
  - serverless-offline
